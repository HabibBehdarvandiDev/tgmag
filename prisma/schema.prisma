generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model permissions {
  id               Int                @id @default(autoincrement())
  permission_name  String             @unique(map: "permission_name") @db.VarChar(100)
  description      String?            @db.VarChar(255)
  role_permissions role_permissions[]
}

model role_permissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  assigned_at   DateTime?   @default(now()) @db.Timestamp(0)
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permissions_ibfk_1")
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permissions_ibfk_2")

  @@unique([role_id, permission_id], map: "role_id")
  @@index([permission_id], map: "permission_id")
}

model roles {
  id               Int                @id @default(autoincrement())
  role_name        String             @unique(map: "role_name") @db.VarChar(100)
  description      String?            @db.VarChar(255)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model user_roles {
  id      Int   @id @default(autoincrement())
  user_id Int
  role_id Int
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_ibfk_1")
  roles   roles @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_ibfk_2")

  @@unique([user_id, role_id], map: "user_id")
  @@index([role_id], map: "role_id")
}

model users {
  id           Int          @id @default(autoincrement())
  first_name   String       @db.VarChar(100)
  last_name    String       @db.VarChar(100)
  username     String       @unique(map: "username") @db.VarChar(255)
  password     String       @db.VarChar(255)
  email        String?      @db.VarChar(255)
  phone_number String?      @db.VarChar(12)
  is_verified  Boolean?     @default(false)
  is_active    Boolean?     @default(false)
  role_id      Int?
  created_at   DateTime?    @default(now()) @db.Timestamp(0)
  updated_at   DateTime?    @default(now()) @db.Timestamp(0)
  blogs        blogs[]
  user_roles   user_roles[]
}

model blogs {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  content     String    @db.Text
  author_id   Int?
  is_approved Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  users       users?    @relation(fields: [author_id], references: [id], onUpdate: NoAction, map: "blogs_ibfk_1")

  @@index([author_id], map: "author_id")
}
